function [theta, J_history] = gradientDescent(X, y, theta, alpha, num_iters)
%GRADIENTDESCENT Performs gradient descent to learn theta
%   theta = GRADIENTDESENT(X, y, theta, alpha, num_iters) updates theta by 
%   taking num_iters gradient steps with learning rate alpha

% Initialize some useful values
m = length(y); % number of training examples
J_history = zeros(num_iters, 1);

for iter = 1:num_iters

    % ====================== YOUR CODE HERE ======================
    % Instructions: Perform a single gradient step on the parameter vector
    %               theta. 
    %
    % Hint: While debugging, it can be useful to print out the values
    %       of the cost function (computeCost) and gradient here.
    %
    	theta1 = theta(1,1);
	theta2 = theta (2,1);
	hTheta = X * theta;
	difference = hTheta .- y;
	% size(difference)  => 97 x 1
	newDiff1 = difference .* X(:,1:1);
	newDiff2 = difference .* X(:, 2:2);
	newDiff1 = theta1 - ( (alpha / m) * sum(newDiff1));
	newDiff2 = theta2 - ( (alpha / m) * sum(newDiff2));
	theta = [newDiff1,newDiff2];
	






    % ============================================================

    % Save the cost J in every iteration    
    J_history(iter) = computeCost(X, y, theta);

end

end
